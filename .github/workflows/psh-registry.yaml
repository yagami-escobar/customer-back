name: Psh Registry
run-name: Runner Psh-Registry
on:
  repository_dispatch:
    types: ['psh-registry-event']
jobs:
  job-upload-image:
    runs-on: 'ubuntu-latest'
    permissions:
      contents: read
      actions: read
    steps:
      - name: Retrieve Parameters from Payload (VAL)
        run: echo " ${{ github.event.client_payload.checksum }}" # get hash
      
      - name: Download Artifact from other Wf (MAIN)
        uses: dawidd6/action-download-artifact@v6
        id: download-artifact
        with:
          name: back-artifact
          github_token: ${{ secrets.GITHUB_TOKEN }}
          workflow: psh-art.yaml
          workflow_conclusion: success
          path: /tmp/back-artifact
      
      - name: Display structure of downloades art (VAL)
        run: |
          echo "RUN ls -al /tmp/back-artifact: $(ls -al /tmp/back-artifact)"

      - name: checksum of download-artifact (VAL)
        run: |
          echo "HASH=$(sha256sum /tmp/back-artifact/${{ github.event.client_payload.artifact_name}} | awk '{print $1}')" >> $GITHUB_ENV
      
      - name: Compare Checksum (VAL)
        run: |
          if [ "${{ env.HASH }}" == "${{ github.event.client_payload.checksum }}" ]; then
            echo "The checksum are equals! successfuly operation"
          else
            echo "The checksum are no equals! failed operation"
            exit 1
          fi

      - name: Check Out (MAIN)
        uses: actions/checkout@v4
        if: success()
        
      - name: Copy Files to Upload (MAIN)
        run: |
          echo "RUN pwd: $(pwd)"
          echo "RUN ls -al: $(ls -al)"
          echo "----------------------------------------------------------"
          echo "RUN ls -al /tmp: $(ls -al /tmp)"
          echo "----------------------------------------------------------"
          echo "RUN cp -v .docker/Dockerfile /tmp/back-artifact/: $(cp -v .docker/Dockerfile /tmp/Dockerfile)"
          echo "RUN cp -v /tmp/back-artifact/${{ github.event.client_payload.artifact_name }} /tmp/${{ github.event.client_payload.artifact_name }}: $(cp -v /tmp/back-artifact/${{ github.event.client_payload.artifact_name }} /tmp/${{ github.event.client_payload.artifact_name }})"
          echo "RUN ls -al /tmp: $(ls -al /tmp)"
      
      - name: Upload Art Final (MAIN)
        uses: actions/upload-artifact@v4
        with:
          name: back-artifact
          path: |
            /tmp/Dockerfile
            /tmp/${{ github.event.client_payload.artifact_name }}

      - name: Validate Art (VAL)
        run: |
          echo "RUN ls -R /tmp: $(ls -R /tmp)"  
          echo "RUN ls -al /tmp: $(ls -al /tmp)"  

  job-docker:
    runs-on: 'ubuntu-latest'
    needs: 'job-upload-image'
    if: success()
    # permissions:
    #   contents: write
    #   actions: read
    steps:
      - name: Set Up QEMU (MAIN)
        uses: docker/setup-qemu-action@v3
      
      - name: Set up Docker Buildx (MAIN)
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub (MAIN)    ## Authenticamos el WF en Gh Packages para poder subir nuestras images.
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Validate Art (VAL)
        run: |
          echo "RUN pwd: $(pwd)"
          echo "RUN ls -al /tmp: $(ls -al /tmp)"  

      - name: Download Art (MAIN)
        uses: actions/download-artifact@v4
        with:
          name: back-artifact
          path: 
            ./context

      - name: Display Structure (VAL)
        run: |
          ls -R ./context

      - name: Build & Push (MAIN)
        uses: docker/build-push-action@v5
        with:
          context: ./context
          file: ./context/Dockerfile
          build-args: |
            JAR_FILE=${{ github.event.client_payload.artifact_name }}
            DB_PASS=${{ secrets.DB_PASS }}
          # platforms: linux/amd64,linux/arm64
          push: true
          tags: ghcr.io/${{ github.repository }}/customer-back:${{ github.sha }}
          no-cache: true
          